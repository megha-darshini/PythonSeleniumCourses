{"name": "test_end_to_end_checkout_guest_user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"http://localhost:8888/demotestsite/checkout/\" class=\"checkout-button button alt wc-forward\">...</a> is not clickable at point (842, 523). Other element would receive the click: <div class=\"blockUI blockOverlay\" style=\"z-index: 1000; border: none; margin: 0px; padding: 0px; width: 100%; height: 100%; top: 0px; left: 0px; background: rgb(255, 255, 255); opacity: 0.6; cursor: wait; position: absolute;\"></div>\n  (Session info: chrome=93.0.4577.82)\nStacktrace:\n0   chromedriver                        0x0000000102e466d9 chromedriver + 2758361\n1   chromedriver                        0x00000001034f9893 chromedriver + 9783443\n2   chromedriver                        0x0000000102bd1ad8 chromedriver + 183000\n3   chromedriver                        0x0000000102c0d141 chromedriver + 426305\n4   chromedriver                        0x0000000102c0ad9e chromedriver + 417182\n5   chromedriver                        0x0000000102c085ba chromedriver + 406970\n6   chromedriver                        0x0000000102c07257 chromedriver + 402007\n7   chromedriver                        0x0000000102bfb358 chromedriver + 353112\n8   chromedriver                        0x0000000102c23022 chromedriver + 516130\n9   chromedriver                        0x0000000102bfb0e5 chromedriver + 352485\n10  chromedriver                        0x0000000102c2329e chromedriver + 516766\n11  chromedriver                        0x0000000102c35514 chromedriver + 591124\n12  chromedriver                        0x0000000102c23243 chromedriver + 516675\n13  chromedriver                        0x0000000102bf9a0e chromedriver + 346638\n14  chromedriver                        0x0000000102bfac75 chromedriver + 351349\n15  chromedriver                        0x0000000102e0d1df chromedriver + 2523615\n16  chromedriver                        0x0000000102e1f9f2 chromedriver + 2599410\n17  chromedriver                        0x0000000102df202b chromedriver + 2412587\n18  chromedriver                        0x0000000102e20e1a chromedriver + 2604570\n19  chromedriver                        0x0000000102e0296c chromedriver + 2480492\n20  chromedriver                        0x0000000102e3ad38 chromedriver + 2710840\n21  chromedriver                        0x0000000102e3aec1 chromedriver + 2711233\n22  chromedriver                        0x0000000102e4b6f8 chromedriver + 2778872\n23  libsystem_pthread.dylib             0x00007fff204728fc _pthread_start + 224\n24  libsystem_pthread.dylib             0x00007fff2046e443 thread_start + 15", "trace": "self = <test_end_to_end_checkout_guest_user.TestEndToEndCheckoutGuestUser object at 0x7f8f2c5702b0>\n\n    @pytest.mark.tcid33\n    def test_end_to_end_checkout_guest_user(self):\n    \n        home_p = HomePage(self.driver)\n        header = Header(self.driver)\n        cart_p = CartPage(self.driver)\n        checkout_p = CheckoutPage(self.driver)\n        order_received_p = OrderReceivedPage(self.driver)\n    \n    \n        # goto home page\n        home_p.goto_home_page()\n        #add 1 item to cart\n        home_p.click_first_add_item_to_cart()\n        #home_p.click_second_add_item_to_cart()\n        #make sure cart is updated\n        header.wait_until_cart_item_count(1)\n        #gotp cart\n        header.click_on_cart_on_right_header()\n        #get names of all products in cart\n        product_names = cart_p.get_all_products_names_in_cart()\n        assert len(product_names) == 1, f\"Expected 1 item in cart but found {len(product_names)}\"\n    \n        #apply free cupon\n        coupon_code = GenericConfigs.FREE_COUPON\n        cart_p.apply_coupon(coupon_code)\n        #select free shipping\n        #cart_p.select_shipping()\n        #click proced to cehckout\n>       cart_p.click_proceed_btn()\n\ntests/end_to_end/test_end_to_end_checkout_guest_user.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/pages/CartPage.py:44: in click_proceed_btn\n    self.sl.wait_and_click(self.PROCEED_BTN)\nsrc/SeleniumExtended.py:21: in wait_and_click\n    WebDriverWait(self.driver,timeout).until(\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:95: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:708: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:368: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8f2c657a00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff204728fc _pthread_start + 224\\\\n24  libsystem_pthread.dylib             0x00007fff2046e443 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, basestring):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"http://localhost:8888/demotestsite/checkout/\" class=\"checkout-button button alt wc-forward\">...</a> is not clickable at point (842, 523). Other element would receive the click: <div class=\"blockUI blockOverlay\" style=\"z-index: 1000; border: none; margin: 0px; padding: 0px; width: 100%; height: 100%; top: 0px; left: 0px; background: rgb(255, 255, 255); opacity: 0.6; cursor: wait; position: absolute;\"></div>\nE         (Session info: chrome=93.0.4577.82)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102e466d9 chromedriver + 2758361\nE       1   chromedriver                        0x00000001034f9893 chromedriver + 9783443\nE       2   chromedriver                        0x0000000102bd1ad8 chromedriver + 183000\nE       3   chromedriver                        0x0000000102c0d141 chromedriver + 426305\nE       4   chromedriver                        0x0000000102c0ad9e chromedriver + 417182\nE       5   chromedriver                        0x0000000102c085ba chromedriver + 406970\nE       6   chromedriver                        0x0000000102c07257 chromedriver + 402007\nE       7   chromedriver                        0x0000000102bfb358 chromedriver + 353112\nE       8   chromedriver                        0x0000000102c23022 chromedriver + 516130\nE       9   chromedriver                        0x0000000102bfb0e5 chromedriver + 352485\nE       10  chromedriver                        0x0000000102c2329e chromedriver + 516766\nE       11  chromedriver                        0x0000000102c35514 chromedriver + 591124\nE       12  chromedriver                        0x0000000102c23243 chromedriver + 516675\nE       13  chromedriver                        0x0000000102bf9a0e chromedriver + 346638\nE       14  chromedriver                        0x0000000102bfac75 chromedriver + 351349\nE       15  chromedriver                        0x0000000102e0d1df chromedriver + 2523615\nE       16  chromedriver                        0x0000000102e1f9f2 chromedriver + 2599410\nE       17  chromedriver                        0x0000000102df202b chromedriver + 2412587\nE       18  chromedriver                        0x0000000102e20e1a chromedriver + 2604570\nE       19  chromedriver                        0x0000000102e0296c chromedriver + 2480492\nE       20  chromedriver                        0x0000000102e3ad38 chromedriver + 2710840\nE       21  chromedriver                        0x0000000102e3aec1 chromedriver + 2711233\nE       22  chromedriver                        0x0000000102e4b6f8 chromedriver + 2778872\nE       23  libsystem_pthread.dylib             0x00007fff204728fc _pthread_start + 224\nE       24  libsystem_pthread.dylib             0x00007fff2046e443 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:240: ElementClickInterceptedException"}, "attachments": [{"name": "screenshot", "source": "4628d99c-3c91-45df-8db6-155569239c18-attachment.png", "type": "image/png"}], "start": 1631794176159, "stop": 1631794188916, "uuid": "a763dc01-13c7-4cdf-bfc3-9f5484d7bf00", "historyId": "47c0a5668bc9a9160a2d7a2a4e6cb615", "testCaseId": "dd3fc4f142e8c6d0e4aa194507ebe868", "fullName": "tests.end_to_end.test_end_to_end_checkout_guest_user.TestEndToEndCheckoutGuestUser#test_end_to_end_checkout_guest_user", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "tag", "value": "tcid33"}, {"name": "parentSuite", "value": "tests.end_to_end"}, {"name": "suite", "value": "test_end_to_end_checkout_guest_user"}, {"name": "subSuite", "value": "TestEndToEndCheckoutGuestUser"}, {"name": "host", "value": "MNEELAKA-M-H1BQ"}, {"name": "thread", "value": "57830-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.end_to_end.test_end_to_end_checkout_guest_user"}]}